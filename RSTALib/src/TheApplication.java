public class TheApplication {
	/**
	 * The GetBusObject method instantiates and returns a new instance of the business object specified 
     * in its argument.
	 * @param objName String variable or literal containing the name of the business object to 
     * instantiate.
	 * @return The business object instance specified in the argument
	 */
public static SiebelBusObject GetBusObject(String objName) {return null;}
/**
 * GetProfileAttr returns the value of an attribute in a user profile.
 * @param paramName A string indicating the name of the attribute
 * @return The value of the attribute name
 */
public static String GetProfileAttr(String paramName) {return "";}
/**
 * SetProfileAttr is used in personalization to assign values to attributes in a user profile.
 * @param paramName A string indicating the name of the attribute
 * @param paramValue The value of name
 */
public static void SetProfileAttr(String paramName, String paramValue) {}
/**
 * The Trace method appends a message to the trace file. Trace is useful for debugging SQL query 
 * execution and the allocation of the objects. This tracing is not the same as the tracing that can be 
 * activated in the application’s CFG file. 
 * @param str message to trace
 */
public static void Trace(String str) {}
/**
 * TraceOff turns off the tracing started by the TraceOn method.
 */
public static void TraceOff() {}
/**
 * TraceOn turns on the tracking of allocations and deallocations of Siebel objects and SQL statements 
 * generated by the Siebel application. 
 */
public static void TraceOn(String fileName, String type, String selection) {}
/**
 * The PositionId property returns the position ID (ROW_ID from S_POSTN) of the user’s current 
 * position. This is set by default when the Siebel application is started and may be changed (through 
 * Edit > Change Position) if the user belongs to more than one position.
 * @return A string row ID
 */
public static String PositionId() {return "";}
/**
 * The PositionName property returns the position name of the user’s current position. This is set by 
 * default when the Siebel application is started.
 * @return A string containing the user’s position
 */
public static String PositionName() {return "";}
/**
 * The LoginId method returns the login ID of the user who started the Siebel application.
 * @return A string containing the login ID
 */
public static String LoginId() {return "";}
/**
 * The LoginName method returns the login name of the user who started the Siebel application (the 
 * name typed in the login dialog box).
 * @return A string containing the user’s login name
 */
public static String LoginName() {return "";}
/**
 * InvokeMethod calls a specialized method or user-defined method specified by its argument.
 * @param methodName The name of the method.
 * @param methodArgs One or more strings containing arguments to methodName.
 */
public static void InvokeMethod(String methodName, String methodArgs) {}
/**
 * The GetService method returns a specified business service. If the business service is not already 
 * running, it is constructed.
 * @param serviceName The name of the service to start
 * @return A reference to the requested business service
 */
public static SiebelService GetService(String serviceName) {return null;}
/**
 * The NewPropertySet method constructs a new property set object.
 * @return A property set
 */
public static SiebelPropertySet NewPropertySet() {return null;}
/**
 * The RaiseErrorText method raises a scripting error message to the browser. The error text is the 
 * specified literal string. The optional arguments are used to format the string if it contains any 
 * substitution arguments (%1, %2).
 * @param errMsg error message show in dialog
 */
public static void RaiseErrorText(String errMsg) {}

}